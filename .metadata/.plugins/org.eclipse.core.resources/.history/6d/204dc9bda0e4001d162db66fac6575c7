package com.kh.spring.member.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.kh.spring.member.model.service.MemberService;
import com.kh.spring.member.model.service.MemberServiceImpl;

@Controller // 생성된 bean이 Controller임을 명시 + bean 등록
@RequestMapping("/member") // localhost:8081/spring/member 이하의 url요청을 처리하는 컨트롤러

// 로그인 , 회원가입 기능 완료 후 실행될 코드
@SessionAttributes({"loginMember"})

public class MemberController {

	private MemberService ms = new MemberServiceImpl();
	// 기존 객체 생성 방식. 서비스가 동시에 많은 횟수의 요청이 들어오면 그 만큼의 객체가 생성됨
	// 객체간의 결합도가 올라감.
	
	// Spring의 DI(Dependency Injection) => 객체를 스프링에서 생성해서 주입을 해주는 개념
	// new 연산자를 쓰지 않고 필드 선언만 한 후 @Autowried라는 어노테이션을 붙여서 내가 필요로 하는
	// 객체르 스프링 컨테이너로부터 주입받을 수 있음.
	
	/*
	 * AutoWired를 통한 객체 주입방법
	 * 1. 필드 방식 의존성 주입
	 * 2. 생성자 방식 의존성 주입
	 * 3. setter방식 의존성 주입
	 * 
	 */
	
	/*
	 * 1) 필드 방식 의존성
	 * 필드방식 의존성 주입 장점 : 이해하기 편하다, 사용하기 편하다
	 * 
	 * 단점 : 1) 순환 의존성 문제가 발생할 수 있다.
	 * 		 2) 무분별한 주입시 의존관계 확인이 어렵다.
	 * 
	 */
	
	//@Autowired // bean으로 등록된 객체중 타입이 같거나, 상속관계인 bean을 자동으로 주입해주는 역할
	private MemberService memberService;
	
	/*
	 * 2) 생성자 방식 의존성 주입
	 * 생성자를 통한 의존성 주입: 생성자에 참조할 클래스를 인자로 받아 필드에 매핑시킴
	 * 
	 * 장점 : 1. 현재 클래스에서 내가 주입시킬 객체들을 모아서 관리할 수 있기 때문에 한눈에 알아보기 편함
	 * 		 2. 코드분석과 테스트에 유리하며, 객체주입시 가장 권장하는 방법
	 * 
	 */
	
	//@Autowired 생성자가 하나일 경우 AutoWired생략 가능. 여러개라면 반드시 Autowired 어노테이션을 추가해야함 
	@Autowired 
	public MemberController(MemberService memberService) {
		this.memberService = memberService;
	}
	
	public MemberController() {
		
	}
	
	/*
	 * 3) setter방식 의존성 주입
	 * Setter 주입방식 : setter메서드로 빈을 주입받는 방식
	 * 
	 * 생성자에 너무 많은 의존성을 주입하게 되면 알아보기 힘들다라는 단점이 있어서 보완하기 위해 사용
	 * 
	 * 필요할때마다 의존성을 주입받아서 사용할때 . 즉 의존성주입이 필수가 아닌 선택사항일때 사용
	 * 
	 */
	@Autowired
	public void setMemberService(MemberService memberService) {
		this.memberService = memberService;
	}
	
	@RequestMapping("login.me")
	public String loginMember(HttpServletRequest request) {
		String userId = request.getParameter("userId");
		String userPwd = request.getParameter("userPwd");
		
		System.out.println(userId);
		System.out.println(userPwd);
		
		return "main";
	}
}

